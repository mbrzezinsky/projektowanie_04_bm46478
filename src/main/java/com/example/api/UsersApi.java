/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.api;

import com.example.models.CreateRequest;
import com.example.models.Error;
import java.util.UUID;
import com.example.models.UpdateRequest;
import com.example.models.UserListResponse;
import com.example.models.UserResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-23T08:41:16.830+01:00[Europe/Belgrade]")

@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /users : Create
     * Create new user
     *
     * @param body User object that has to be added (required)
     * @return User created successfully (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Unprocessable entity. Codes: USER_ALREADY_EXISTS (status code 422)
     */
    @ApiOperation(value = "Create", nickname = "createUser", notes = "Create new user", response = UserResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User created successfully", response = UserResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 422, message = "Unprocessable entity. Codes: USER_ALREADY_EXISTS", response = Error.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<UserResponse> createUser(@ApiParam(value = "User object that has to be added" ,required=true )  @Valid @RequestBody CreateRequest body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"responseHeader\" : { \"sendDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requestId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"user\" : { \"personalId\" : \"92011165987\", \"surname\" : \"Musk\", \"citizenship\" : \"PL\", \"name\" : \"Elon\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"age\" : 10, \"email\" : \"e_musk@gmail.com\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{id} : Delete user
     * Removes user
     *
     * @param id  (required)
     * @return No content (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or User not found (status code 404)
     *         or Unprocessable entity. (status code 422)
     */
    @ApiOperation(value = "Delete user", nickname = "deleteUser", notes = "Removes user", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content"),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "User not found", response = Error.class),
        @ApiResponse(code = 422, message = "Unprocessable entity.", response = Error.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteUser(@ApiParam(value = "",required=true) @PathVariable("id") UUID id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : Get users list
     * Gets all users data
     *
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Unprocessable entity. Codes: USER_ALREADY_EXISTS (status code 422)
     */
    @ApiOperation(value = "Get users list", nickname = "getAllUsers", notes = "Gets all users data", response = UserListResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UserListResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 422, message = "Unprocessable entity. Codes: USER_ALREADY_EXISTS", response = Error.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UserListResponse> getAllUsers() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"usersList\" : [ { \"personalId\" : \"92011165987\", \"surname\" : \"Musk\", \"citizenship\" : \"PL\", \"name\" : \"Elon\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"age\" : 10, \"email\" : \"e_musk@gmail.com\" }, { \"personalId\" : \"92011165987\", \"surname\" : \"Musk\", \"citizenship\" : \"PL\", \"name\" : \"Elon\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"age\" : 10, \"email\" : \"e_musk@gmail.com\" } ], \"responseHeader\" : { \"sendDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requestId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{id} : Get user
     * Gets specified user data
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or User not found (status code 404)
     *         or Unprocessable entity. Codes: USER_ALREADY_EXISTS (status code 422)
     */
    @ApiOperation(value = "Get user", nickname = "getUserById", notes = "Gets specified user data", response = UserResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UserResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "User not found", response = Error.class),
        @ApiResponse(code = 422, message = "Unprocessable entity. Codes: USER_ALREADY_EXISTS", response = Error.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UserResponse> getUserById(@ApiParam(value = "",required=true) @PathVariable("id") UUID id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"responseHeader\" : { \"sendDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requestId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"user\" : { \"personalId\" : \"92011165987\", \"surname\" : \"Musk\", \"citizenship\" : \"PL\", \"name\" : \"Elon\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"age\" : 10, \"email\" : \"e_musk@gmail.com\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{id} : Update user
     * Update user data
     *
     * @param id  (required)
     * @param body  (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or User not found (status code 404)
     *         or Unprocessable entity. (status code 422)
     */
    @ApiOperation(value = "Update user", nickname = "updateUser", notes = "Update user data", response = UserResponse.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UserResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "User not found", response = Error.class),
        @ApiResponse(code = 422, message = "Unprocessable entity.", response = Error.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<UserResponse> updateUser(@ApiParam(value = "",required=true) @PathVariable("id") UUID id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody UpdateRequest body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"responseHeader\" : { \"sendDate\" : \"2000-01-23T04:56:07.000+00:00\", \"requestId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"user\" : { \"personalId\" : \"92011165987\", \"surname\" : \"Musk\", \"citizenship\" : \"PL\", \"name\" : \"Elon\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"age\" : 10, \"email\" : \"e_musk@gmail.com\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
